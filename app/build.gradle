plugins {
    id 'com.android.application'
}

def arcore_libpath = "${buildDir}\\arcore-native"
def OCCT_ROOT = "${project.rootDir}\\..\\..\\OpenCascadeTechnologies\\OCCT-arm64-v8a\\install"
def FREETYPE_ROOT="${project.rootDir}\\..\\..\\OpenCascadeTechnologies\\deps-android\\freetype-2.7.1-android"

// Create a configuration to mark which aars to extract .so files from
configurations { natives }

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.example.dimension"
        minSdk 24
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11", "-Wall"
                arguments "-DANDROID_STL=c++_shared",
                        "-DARCORE_LIBPATH=${arcore_libpath}\\jni",
                        "-DARCORE_INCLUDE=${project.rootDir}\\..\\arcore-android-sdk\\libraries\\include",
                        "-DGLM_INCLUDE=${project.rootDir}\\..\\..\\third_party\\glm",
                        "-DOCCT_ROOT=" + OCCT_ROOT,
                        "-DFREETYPE_ROOT=" + FREETYPE_ROOT
            }
        }
        ndk {
            abiFilters "arm64-v8a"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    // ARCore (Google Play Services for AR) library.
    implementation 'com.google.ar:core:1.26.0'
    natives 'com.google.ar:core:1.26.0'

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
}

// Extracts the shared libraries from aars in the natives configuration.
// This is done so that NDK builds can access these libraries.
task extractNativeLibraries() {
    // Always extract, this insures the native libs are updated if the version changes.
    outputs.upToDateWhen { false }
    doFirst {
        configurations.natives.files.each { f ->
            copy {
                from zipTree(f)
                into arcore_libpath
                include "jni/**/*"
            }
        }
    }
}

tasks.whenTaskAdded {
    task-> if (task.name.contains("external") && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibraries)
    }
}